// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef RAKUTENREWARDSDK_SWIFT_H
#define RAKUTENREWARDSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="RakutenRewardSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum OpenAdPortalError : NSInteger;

/// Rakuten Reward SDK delegate. Has delegates for open ad portal successful, fail to open ad portal, close ad portal successful.
SWIFT_PROTOCOL("_TtP16RakutenRewardSDK16AdPortalDelegate_")
@protocol AdPortalDelegate
@optional
/// Open ad portal successful delegate.
- (void)didOpenAdPortal;
/// Fail to open ad portal delegate.
/// \param error Reason for fail to open ad portal is either appcode invalid (developer to check) or ad portal url invalid (SDK issue).
///
- (void)didFailOpenAdPortalWithError:(enum OpenAdPortalError)error;
/// Close ad portal successful delegate.
- (void)didCloseAdPortal;
@end





@class NSString;
@class NSDate;
@class NSNumber;

/// An object that contains information about mission achievement, such as getting the mission’s name, action code, instruction, icon url, notification type etc.
/// You can claim points using ‘claim’ method for achieved mission.
SWIFT_CLASS("_TtC16RakutenRewardSDK22MissionAchievementData")
@interface MissionAchievementData : NSObject
/// Initialization for mission achievement class, internal use only.
/// Required public access for Unity.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Claim point(s) for this achieved mission.
- (void)claim;
/// Mission’s action code.
///
/// returns:
/// The mission’s action code.
- (NSString * _Nullable)getAction SWIFT_WARN_UNUSED_RESULT;
/// Mission’s instruction.
///
/// returns:
/// The mission’s instruction.
- (NSString * _Nullable)getInstruction SWIFT_WARN_UNUSED_RESULT;
/// Mission’s icon url.
///
/// returns:
/// The mission’s icon url.
- (NSString * _Nullable)getIconUrl SWIFT_WARN_UNUSED_RESULT;
/// Mission’s notification UI type.
///
/// returns:
/// The mission’s notification UI type (MODAL, BANNER, NONE, CUSTOM, BANNER_50, BANNER_250).
- (NSString * _Nullable)getNotificationType SWIFT_WARN_UNUSED_RESULT;
/// Mission’s name.
///
/// returns:
/// The mission’s name.
- (NSString * _Nullable)getName SWIFT_WARN_UNUSED_RESULT;
/// Mission’s achievement date.
///
/// returns:
/// The mission’s achievement date.
- (NSDate * _Nullable)getAchievedDate SWIFT_WARN_UNUSED_RESULT;
/// Mission’s points.
///
/// returns:
/// The mission point (NSNumber).
- (NSNumber * _Nullable)getPoint SWIFT_WARN_UNUSED_RESULT;
/// Check if mission’s type is custom type.
///
/// returns:
/// Is mission a custom type.
- (BOOL)isCustom SWIFT_WARN_UNUSED_RESULT;
/// For internal use only, need to be public for Unity.
- (void)setActionWithAction:(NSString * _Nonnull)action;
/// For internal use only, need to be public for Unity.
- (void)setAchievedDateStrWithAchievedDateStr:(NSString * _Nullable)achievedDateStr;
@end

/// Error cases for open ad portal from RakutenReward.sharedInstance object
typedef SWIFT_ENUM(NSInteger, OpenAdPortalError, open) {
/// Appcode is invalid. Please check your appcode
  OpenAdPortalErrorAppCodeInvalid = 0,
/// Url invalid. This is SDK issue
  OpenAdPortalErrorUrlInvalid = 1,
};

/// ADSDK advertisement error codes.
typedef SWIFT_ENUM(NSInteger, RADErrorCode, open) {
/// Network error.
  RADErrorCodeNetworkError = 1001,
/// Advertisement is not available.
  RADErrorCodeNoAvailableAd = 1002,
/// No coupon data is returned.
  RADErrorCodeNoCouponError = 1003,
/// DFP error.
  RADErrorCodeDfpError = 1004,
/// Unknown error.
  RADErrorCodeUnknown = 9999,
};

/// Advertisement size.
/// <h3>Usage Example</h3>
/// \code
/// RAdSize.banner
/// RAdSize.large
/// RAdSize.rectangle
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, RAdSize, open) {
/// Ad size (320x50).
  RAdSizeBanner = 0,
/// Ad size (320x100).
  RAdSizeLarge = 1,
/// Ad size (300x250).
  RAdSizeRectangle = 2,
/// Ad size (300X400).
  RAdSizeFullScreen = 3,
};

/// The frequency of Reward SDK’s data collection.
typedef SWIFT_ENUM(NSInteger, RWFrequency, open) {
/// Data is collected once per day.
  RWFrequencyOncePerDay = 0,
/// Data is collected every 5 minutes.
  RWFrequencyPer5Minutes = 1,
/// Data will not be collected.
  RWFrequencyNone = 2,
};

@protocol RakutenADBannerViewDelegate;
@class NSCoder;

/// An object for ADSDK Ad view
SWIFT_CLASS("_TtC16RakutenRewardSDK13RakutenAdView")
@interface RakutenAdView : UIView
/// Ad size
@property (nonatomic) enum RAdSize adSize;
/// Keyword used to filter ads
@property (nonatomic, copy) NSString * _Nullable keyword;
/// Location id used to filter ads
@property (nonatomic, copy) NSString * _Nullable locationId;
/// Delegate for advertisement such as did receive ads, failed to receive ads, did click ads, did update ads visibility.
@property (nonatomic, weak) id <RakutenADBannerViewDelegate> _Nullable delegate;
/// Awake from nib.
- (void)awakeFromNib;
/// UpdateConstraints on UIView.
- (void)updateConstraints;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol RakutenRewardDelegate;
enum RakutenRewardStatus : NSInteger;
@class User;

/// An object that contains information about Rakuten Reward SDK basic functions, such as SDK initialization, log action, open portal and etc.
SWIFT_CLASS("_TtC16RakutenRewardSDK13RakutenReward")
@interface RakutenReward : NSObject
/// Shared object for RakutenReward.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RakutenReward * _Nonnull sharedInstance;)
+ (RakutenReward * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Rakuten Reward delegate.
@property (nonatomic, weak) id <RakutenRewardDelegate> _Nullable delegate;
/// Get more logs from Reward SDK by setting isDebug to true. isDebug is false by default.
@property (nonatomic) BOOL isDebug;
/// For iOS 14 and above, please set the IDFA or ad tracking ID to this property.
@property (nonatomic, copy) NSString * _Nullable advertisingID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize Reward SDK with appcode.
/// \param appCode Application key for Reward SDK.
///
- (void)startSessionWithAppCode:(NSString * _Nonnull)appCode;
/// Log action with action code.
/// If you are logging multiple actions at the same time, please use <code>logAction(actionCode:isQueueEnabled:)</code> instead.
/// Logging multiple action without queue may cause some log action to fail.
/// \param actionCode Mission’s action code.
///
- (void)logActionWithActionCode:(NSString * _Nonnull)actionCode;
/// Log action with action code with queue. Use this method when logging multiple actions.
/// \param actionCode Mission’s action code.
///
/// \param isQueueEnabled If set to true, log action will be added to queue else log action will be called without queue.
///
- (void)logActionWithActionCode:(NSString * _Nonnull)actionCode isQueueEnabled:(BOOL)isQueueEnabled;
/// Open webview for Reward SDK portal page.
- (void)openPortal;
/// Open webview for Reward SDK advertisement portal page.
/// \param delegate AdPortal delegate such as open ad portal successful, fail to open ad portal, close ad portal successful.
///
- (void)openAdPortalWithDelegate:(id <AdPortalDelegate> _Nullable)delegate;
/// Add URL to block list to block access to a specific URL.
/// This is for App Store submission rejection. Please use this API if the ad URL has problem.
/// \param urlSet Set of URL string.
///
- (void)addBlockListURLWithUrlSet:(NSSet<NSString *> * _Nonnull)urlSet;
/// Update user’s mission list (save into user data).
/// This is for internal use only (sample app).
- (void)updateMissionList;
/// Application key (appcode) for Reward SDK.
- (NSString * _Nullable)getAppCode SWIFT_WARN_UNUSED_RESULT;
/// Rakuten Reward SDK status.
///
/// returns:
/// Rakuten Reward SDK status such as online, offline, and appcode invalid.
- (enum RakutenRewardStatus)getStatus SWIFT_WARN_UNUSED_RESULT;
/// User information.
///
/// returns:
/// User information such as sign in status, unclaimed mission count, points, and mission list.
- (User * _Nullable)getUser SWIFT_WARN_UNUSED_RESULT;
/// SDK version.
///
/// returns:
/// SDK version number.
- (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
/// SDK opt out status.
///
/// returns:
/// Whether SDK is optout or not. If true, SDK feature is disabled. If false, SDK feature is enabled.
- (BOOL)isOptedOut SWIFT_WARN_UNUSED_RESULT;
/// Mission’s achievement notification UI (Banner, Modal, etc) setting.
///
/// returns:
/// If this setting is set to false, SDK will not show notification to users.
- (BOOL)isUIEnabled SWIFT_WARN_UNUSED_RESULT;
/// Set SDK Mission’s achievement notification UI setting.
/// Users is able to change this setting on Reward SDK Portal’s setting page.
/// \param enabled If this setting is set to true, SDK will show notification to users. If set to false, SDK will not show notification to users.
///
- (void)setUIEnabledWithEnabled:(BOOL)enabled;
/// This API is deprecated and no longer supported. Will be removed in future version.
- (void)didUpdateLocationWithLongitude:(double)longitude latitude:(double)latitude timeStamp:(NSDate * _Nonnull)timeStamp;
- (void)openSignin SWIFT_UNAVAILABLE_MSG("Migrated login from RAE to OMNI. This API is no longer supported from version 9.3.0.");
@end

@protocol RakutenRewardSessionDelegate;

@interface RakutenReward (SWIFT_EXTENSION(RakutenRewardSDK))
/// Sign in Reward SDK
/// \param username User name
///
/// \param password Password
///
/// \param delegate Delegate method for this API
///
///
/// returns:
///
- (void)doSignInUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password delegate:(id <RakutenRewardSessionDelegate> _Nullable)delegate SWIFT_AVAILABILITY(ios,introduced=11);
/// Cancel Sign in API(This API can be called when Sign in API is working)
- (void)cancelSignIn SWIFT_AVAILABILITY(ios,introduced=11);
/// Sign out Reward SDK
/// \param delegate Delegate method for this API
///
///
/// returns:
///
- (void)doSignOutWithDelegate:(id <RakutenRewardSessionDelegate> _Nullable)delegate SWIFT_AVAILABILITY(ios,introduced=11);
/// Cancel sign out(This API can be called when Sign out API is working)
- (void)cancelSignOut SWIFT_AVAILABILITY(ios,introduced=11);
@end


/// An object that contains information about Rakuten Reward SDK Ads information
SWIFT_CLASS("_TtC16RakutenRewardSDK16RakutenRewardAds")
@interface RakutenRewardAds : NSObject
/// Shared object for RakutenRewardAds.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RakutenRewardAds * _Nonnull sharedInstance;)
+ (RakutenRewardAds * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) BOOL isDebug SWIFT_DEPRECATED_MSG("Use RewardConfiguration.isDebug");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize Reward SDK Ads with appcode.
/// \param appCode Application key for Reward SDK.
///
- (void)initializeWithAppCode:(NSString * _Nonnull)appCode;
/// Application key (appcode) for Reward SDK.
- (NSString * _Nullable)getAppCode SWIFT_WARN_UNUSED_RESULT;
/// SDK version.
///
/// returns:
/// SDK version number.
- (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
@end


/// Rakuten Reward SDK delegate. Has delegates for RakutenRewardStatus change, mission achievement data updated, and user updated.
SWIFT_PROTOCOL("_TtP16RakutenRewardSDK21RakutenRewardDelegate_")
@protocol RakutenRewardDelegate
@optional
/// SDK status updated delegate.
/// \param status Updated Rakuten Reward SDK status.
///
- (void)didSDKStateChange:(enum RakutenRewardStatus)status;
/// Mission achievement data updated.
/// \param missionAchievement Updated mission achievement information.
///
- (void)didUpdateUnclaimedAchievement:(MissionAchievementData * _Nonnull)missionAchievement;
/// User information updated delegate.
/// \param user Updated user information.
///
- (void)didUpdateUser:(User * _Nonnull)user;
@end

enum RewardSessionErrorCode : NSInteger;

/// Rakuten Reward SDK delegate for Sign in and Sign out APIs
SWIFT_PROTOCOL("_TtP16RakutenRewardSDK28RakutenRewardSessionDelegate_")
@protocol RakutenRewardSessionDelegate
@optional
/// Finished sign in successful delegate.
- (void)didFinishSignIn;
/// Failed to sign in delegate.
/// \param error RewardSessionErrorCode (please check details in RewardSessionErrorCode)
///
- (void)didFailSignInError:(enum RewardSessionErrorCode)error;
/// Finished Sign out successful delegate.
- (void)didFinishSignOut;
/// Failed to sign out delegate.
/// \param error RewardSessionErrorCode (please check details in RewardSessionErrorCode)
///
- (void)didFailSignOutWithError:(enum RewardSessionErrorCode)error;
/// Fail to cancel sign out delegate
/// \param error RewardSessionErrorCode (please check details in RewardSessionErrorCode)
///
- (void)didFailCancelSignOutWithError:(enum RewardSessionErrorCode)error;
/// Fail to cancel sign in delegate
/// \param error RewardSessionErrorCode (please check details in RewardSessionErrorCode)
///
- (void)didFailCancelSignInError:(enum RewardSessionErrorCode)error;
@end

/// Rakuten Reward SDK status.
typedef SWIFT_ENUM(NSInteger, RakutenRewardStatus, open) {
/// SDK is Online and ready to use.
  RakutenRewardStatusOnline = 0,
/// SDK is Offline.
  RakutenRewardStatusOffline = 1,
/// Application code (key) is invalid (please check your key).
  RakutenRewardStatusAppCodeInvalid = 2,
};

@class RakutenADBannerView;

/// RADBannerViewDelegate (this covers callback of Banner Ad status change).
SWIFT_PROTOCOL_NAMED("RewardADBannerViewDelegate")
@protocol RakutenADBannerViewDelegate
/// Ad request has loaded an ad delegate.
/// \param bannerView RakutenADBannerView
///
- (void)didReceiveAdWithBannerView:(RakutenADBannerView * _Nonnull)bannerView;
/// Ad request failed delegate.
/// \param bannerView RakutenADBannerView,
///
/// \param message Error message,
///
/// \param code RADErrorCode
///
- (void)didFailToReceiveAdWithBannerView:(RakutenADBannerView * _Nonnull)bannerView message:(NSString * _Nonnull)message code:(enum RADErrorCode)code;
@optional
/// Ad gets clicked delegate.
- (void)didClickAdWithBannerView:(RakutenAdView * _Nonnull)bannerView;
/// Ads visibility status updated delegate.
- (void)adVisibleStatusUpdatedWithVisible:(BOOL)visible;
@end

@protocol RakutenADInterstitialDelegate;
@class NSBundle;

/// AdSDK Interstitial or full screen advertisement.
SWIFT_CLASS_NAMED("RewardAdInterstitial")
@interface RakutenADInterstitial : UIViewController
/// Location ID to be used for filtering advertisement.
@property (nonatomic, copy) NSString * _Nonnull locationId;
/// View controller used for showing advertisement.
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
/// Delegate object which include did receive advertisement, fail to receive advertisement, and etc.
@property (nonatomic, weak) id <RakutenADInterstitialDelegate> _Nullable delegate;
/// Setup UI and delegate
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// Load advertisement.
/// \param showing By default, this argument is set to false. You have to call <code>showAd()</code> manually. If set to true, ad will automatically be shown after finished load.
///
- (void)loadAd:(BOOL)showing;
/// Show interstitial/fullscreen advertisement on app’s top view.
/// Note: showing UI on main queue is handled by SDK.
- (void)showAd;
/// Should auto rotate is false.
@property (nonatomic, readonly) BOOL shouldAutorotate;
/// Both portait and landscape is supported for iPad. Only portrait is supported for other devices.
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
/// Instantiate advertisement.
+ (RakutenADInterstitial * _Nonnull)instantiate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("RewardAdInterstitialDelegate")
@protocol RakutenADInterstitialDelegate
/// Tells the delegate an ad request loaded an ad.
/// \param ad RewardAdInterstitial
///
- (void)interstitialDidReceiveAdWithAd:(RakutenADInterstitial * _Nonnull)ad;
/// Tells the delegate an ad request failed.
/// \param ad RewardAdInterstitial, message: Error message, code: RADErrorCode
///
- (void)interstitialDidFailToReceiveAdWithAd:(RakutenADInterstitial * _Nonnull)ad message:(NSString * _Nonnull)message code:(enum RADErrorCode)code;
@optional
/// Tells the delegate that an interstitial will be presented.
/// \param ad RewardAdInterstitial
///
- (void)interstitialWillPresentScreenWithAd:(RakutenADInterstitial * _Nonnull)ad;
/// Tells the delegate the interstitial is to be animated off the screen.
/// \param ad RewardAdInterstitial
///
- (void)interstitialWillDismissScreenWithAd:(RakutenADInterstitial * _Nonnull)ad;
/// Tells the delegate the interstitial had been animated off the screen.
/// \param ad RewardAdInterstitial
///
- (void)interstitialDidDismissScreenWithAd:(RakutenADInterstitial * _Nonnull)ad;
/// Tells the delegate that a user click will open another app
/// (such as the App Store), backgrounding the current app.
/// \param ad RewardAdInterstitial
///
- (void)interstitialWillLeaveApplicationWithAd:(RakutenADInterstitial * _Nonnull)ad;
@end


/// AdSDK banner advertisement includes banner, large banner, and rectangle size.
SWIFT_CLASS_NAMED("RewardAdbannerView")
@interface RakutenADBannerView : RakutenAdView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)load;
/// Load advertisement with AdSize.
/// <h3>Usage EXample</h3>
/// \code
/// yourbannerview.load(RAdSize.banner)
/// yourbannerview.load(RAdSize.large)
/// yourbannerview.load(RAdSize.rectangle)
///
/// \endcode\param AdSize Type of advertisement, default type is banner (320 x 50).
/// Other advertisement type are large (320 x 100) and rectangle (320 x 250).
///
- (void)loadWithAdSize:(enum RAdSize)adSize;
- (void)didMoveToSuperview;
@end


/// An object to set settings or configuration for Rakuten Reward SDK.
SWIFT_CLASS("_TtC16RakutenRewardSDK19RewardConfiguration")
@interface RewardConfiguration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// This configuration is deprecated and no longer supported. Will be removed in future version.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL enableManualLocationPermissionRequest;)
+ (BOOL)enableManualLocationPermissionRequest SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnableManualLocationPermissionRequest:(BOOL)value;
/// Get more logs from Reward SDK by setting isDebug to true. isDebug is false by default.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isDebug;)
+ (BOOL)isDebug SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsDebug:(BOOL)value;
/// Mission’s achievement notification UI (Banner, Modal, etc) setting. If this setting is set to false, SDK will not show notification to users.
/// Users is able to change this setting on Reward SDK Portal’s setting page.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isUserSettingUIEnabled;)
+ (BOOL)isUserSettingUIEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsUserSettingUIEnabled:(BOOL)newValue;
/// Get the enable status of mission X event feature
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isMissionEventFeatureEnabled;)
+ (BOOL)isMissionEventFeatureEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsMissionEventFeatureEnabled:(BOOL)value;
@end


/// Rakuten Reward SDK default portal bar button UI
SWIFT_CLASS("_TtC16RakutenRewardSDK25RewardPortalBarButtonItem")
@interface RewardPortalBarButtonItem : UIBarButtonItem
/// Portal bar button initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

@class UIButton;
enum ColorType : NSInteger;
enum BadgePosition : NSInteger;

/// Rakuten Reward SDK default portal button UI.
SWIFT_CLASS("_TtC16RakutenRewardSDK18RewardPortalButton")
@interface RewardPortalButton : UIView
/// UIButton for RewardPortalButton’s view
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified portalButton;
/// Default awakeFromNib and add observers
- (void)awakeFromNib;
/// Initialize portal button with frame
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Layout subviews and update badge UI
- (void)layoutSubviews;
/// Button image’s color type
@property (nonatomic) enum ColorType colorType;
/// Badge’s position
@property (nonatomic) enum BadgePosition badgePosition;
/// Badge’s position by point
@property (nonatomic) CGPoint badgePositionPoint;
@end

/// Portal button’s color type
typedef SWIFT_ENUM(NSInteger, ColorType, open) {
/// White color
  ColorTypeLight = 0,
/// Black color
  ColorTypeDark = 1,
};

/// Badge position (top left, top right, bottom left, bottom right, center, custom)
typedef SWIFT_ENUM(NSInteger, BadgePosition, open) {
/// Top left position
  BadgePositionTopLeft = 0,
/// Top right position
  BadgePositionTopRight = 1,
/// Bottom left position
  BadgePositionBottomLeft = 2,
/// Bottom right position
  BadgePositionBottomRight = 3,
/// Center position
  BadgePositionCenter = 4,
/// Custom position
  BadgePositionCustom = 5,
};

/// Reward Session Error Code (This is for Signin and Signout API).
typedef SWIFT_ENUM(NSInteger, RewardSessionErrorCode, open) {
/// Appcode error (please use iOS application code).
  RewardSessionErrorCodeAppCodeInvalid = 1001,
/// Member information error (after sign in, SDK cannot get user infromation correctly).
  RewardSessionErrorCodeMemberInfoError = 1002,
/// SDK status error (SDK Cookies are missing, the user should be anonymous user or SDK is disabled).
  RewardSessionErrorCodeSdkStatusError = 1003,
/// Request error (loading error of background WebView).
  RewardSessionErrorCodeRequestError = 1004,
/// Parameter error (cannot get sign in parameters from server).
  RewardSessionErrorCodeProcessParameterError = 1005,
/// Bad request for MemberInfo, when there’s unexpected Cookie Storage behavior, please startSession again.
  RewardSessionErrorCodeMemberInfoSpecialError = 1006,
/// Unknown error
  RewardSessionErrorCodeUnknown = 9999,
/// Javascript error (background WebView javascript run error. This includes username and password wrong error).
  RewardSessionErrorCodeJsError = 2001,
/// Log out already happened on server side, cancelling the log out has failed.
  RewardSessionErrorCodeLogOutDidHappenOnServer = 2002,
/// Log in already happened on server side, cancelling the log out has failed.
  RewardSessionErrorCodeLogInDidHappenOnServer = 2003,
};









/// An object that contains information about user, such as sign in status, unclaimed mission count, points, and mission list.
SWIFT_CLASS("_TtC16RakutenRewardSDK4User")
@interface User : NSObject
/// User’s sign in status.
///
/// returns:
/// returns true if user is signed in and false if user is not signed in.
- (BOOL)isSignin SWIFT_WARN_UNUSED_RESULT;
/// User’s unclaimed mission count.
///
/// returns:
/// The number of user’s unclaimed mission.
- (NSInteger)getUnclaimed SWIFT_WARN_UNUSED_RESULT;
/// User’s points.
///
/// returns:
/// The user’s current points.
- (NSInteger)getPoint SWIFT_WARN_UNUSED_RESULT;
/// User’s mission list.
///
/// returns:
/// The missions for this user.
- (NSArray<MissionAchievementData *> * _Nullable)getAchievementsList SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
